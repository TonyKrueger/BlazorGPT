@implements IDisposable

<span class="float-end">
    <ModelSettingsButton />
    <InterceptorSettingsButton OnSettingsChangedAction="@InterceptorSettingsChanged" />
    <PluginSelectorButton/>
</span>


@code {
        [Inject] public required InterceptorConfigurationService InterceptorConfigurationService { get; set; }

        [Inject]
        public required SettingsStateNotificationService SettingsStateNotificationService { get; set; }

        [Inject]
        public required NotificationService NotificationService { get; set; }

       

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var list = await InterceptorConfigurationService.GetConfig();
            InterceptorSettingsChanged(list);
        }
    }

    protected override void OnInitialized()
    {

        SettingsStateNotificationService.OnUpdate  += SettingsChanged;
    }

    private async Task SettingsChanged(SettingsChangedNotification arg)
    {

        // NotificationService.Notify(new NotificationMessage()
        //     {
        //         Summary = "Change for InterceptorSettings detected for: " + arg.UserId + arg.Type,
        //         Severity = NotificationSeverity.Info
        //     });


    }



    private void InterceptorSettingsChanged(IEnumerable<string> selectedInterceptors)
    {
  
        StateHasChanged();


    }

    public void Dispose()
    {
        SettingsStateNotificationService.OnUpdate -= SettingsChanged;
    }

}
