@using Microsoft.Extensions.Options
@using BlazorGPT.Pipeline.Interceptors
@using BlazorGPT.Pipeline
@implements IDisposable
<RadzenCheckBoxList  @ref="list" @bind-Value=@Selected TValue="string" Orientation="Orientation.Vertical"
                    Data="Interceptors.Where(i => !i.Internal).Select(i => i.Name)"
                    Change="OnListChanged"
                    class="@Class">
</RadzenCheckBoxList>

@code {

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }
    public string UserId { get; set; } = null!;

    [Parameter]
    public string? Class { get; set; }
 
    [Inject]
    public IServiceProvider ServiceProvider { get; set; } = null!;

    [Inject]
    public IOptions<PipelineOptions> Options { get; set; } = null!;

    [Inject]
    public DialogService DialogService { get; set; } = null!;

    [Inject] 
    public required InterceptorConfigurationService InterceptorConfigurationService { get; set; }

    [Inject]
    public required InterceptorRepository InterceptorRepository { get; set; }
    
    [Inject]
    public required SettingsStateNotificationService SettingsStateNotificationService { get; set; }

    public IEnumerable<string>? PreSelected => Options.Value.PreSelectedInterceptors;

    private readonly object _model = new();


    IEnumerable<IInterceptor> Interceptors;
    IEnumerable<string> Selected = new List<string>();
    public IEnumerable<IInterceptor>? SelectedInterceptors => Interceptors.Where(i => Selected.Contains(i.Name) || i.Internal);

    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState != null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;
            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                UserId = user.FindFirstValue(ClaimTypes.NameIdentifier)!;
            }
        }


        Interceptors = InterceptorRepository.LoadAll().ToList();
        Selected = Interceptors.Where(i => PreSelected != null && PreSelected.Contains(i.Name)).Select(i => i.Name);

        SettingsStateNotificationService.OnUpdate += SettingsChanged;


    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Selected = await GetBrowserSettings();
            StateHasChanged();
        }
    }

    private async Task OnListChanged()
    {
        if (SelectedInterceptors?.Count(i => i is IStateWritingInterceptor) > 1)
        {
            await DialogService.Alert("You can only use one hive interceptor at a time.");
            return;
        }

        await SetSelectionsInLocalStorage();

        SettingsStateNotificationService.NotifySettingsChanged(new SettingsChangedNotification()
        {
            UserId = UserId,
            Type = typeof(InterceptorSelector)
        });
    
        StateHasChanged();
    }

    public RadzenCheckBoxList<string> list { get; set; }


    private async Task<IEnumerable<string>?> GetBrowserSettings() => await InterceptorConfigurationService.GetConfig();

    List<string>? BrowserData { get; set; }

    private async Task SetSelectionsInLocalStorage()
    { 
        await InterceptorConfigurationService.SaveConfig(Selected);
    }
 

    public void Dispose()
    {
        SettingsStateNotificationService.OnUpdate -= SettingsChanged;
    }

    private Task SettingsChanged(SettingsChangedNotification obj)
    {
        if (obj.UserId != UserId || obj.Type != typeof(InterceptorSelector))
        {
            return Task.CompletedTask ; 
        }

        Interceptors = InterceptorRepository.LoadAll().ToList();
        Selected = Interceptors.Where(i => PreSelected != null && PreSelected.Contains(i.Name)).Select(i => i.Name);

        StateHasChanged();

        return Task.CompletedTask;
    }

}