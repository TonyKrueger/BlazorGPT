@using BlazorGPT.Data
@if (_profiles != null)
{
    @if (!_profiles.Any() && ShowLegend)
    {
        <div>You do not have any quick profiles. Create some <a href="/quickprofiles">here</a></div>
    }
    else
    {
        <div class="mt-1 mb-1 ms-3">
            <RadzenText TextStyle="TextStyle.Overline">QP @InsertAt</RadzenText>
        @if (ConversationsHasStarted)
        {
            if (InsertAt == InsertAt.Before)
            {
                    @foreach (var profile in _profiles)
                    {
                        <RadzenButton class="qp-button" Shade="Shade.Lighter" Size="ButtonSize.ExtraSmall" ButtonStyle="ButtonStyle.Warning" Disabled="true" MouseEnter="@(args => ShowTooltip(args, profile.Content, new TooltipOptions() { CssClass = "qp-tooltip" }))">@profile.Name</RadzenButton>
                    }
            }

            if (InsertAt == InsertAt.After) 
            {
                    @foreach (var profile in _profiles)
                    {
                        <RadzenButton class="qp-button" Shade="Shade.Lighter" Size="ButtonSize.ExtraSmall" ButtonStyle="ButtonStyle.Warning" Click="() => Execute(profile)" MouseEnter="@(args => ShowTooltip(args, profile.Content, new TooltipOptions() { CssClass = "qp-tooltip" }))">@profile.Name</RadzenButton>
                    }
            }
        }
        else
        {
                @foreach (var profile in _profiles)
                {
                    <RadzenButton class="qp-button" Shade="Shade.Lighter"  Size="ButtonSize.ExtraSmall" ButtonStyle="@GetButtonStyle(profile)" Click="() => Toggle(profile)" MouseEnter="@(args => ShowTooltip(args, profile.Content, new TooltipOptions() { CssClass = "qp-tooltip"}))">@profile.Name</RadzenButton>
                }
        }
        </div>
    }
}   

@code {
    [Parameter]
    public InsertAt InsertAt { get; set; }

    [Inject]
    public QuickProfileRepository? QuickProfileRepository { get; set; }

    [Inject]
    public TooltipService? tooltipService { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationState { get; set; }

    public string? UserId { get; set; } = null!;

    List<QuickProfile>? _profiles;

    public List<QuickProfile> SelectedProfiles = new List<QuickProfile>();

    [Parameter]
    public bool ShowLegend { get; set; }

    [Parameter]
    public bool ConversationsHasStarted { get; set; }


    protected override async Task OnInitializedAsync()
    {
        if (AuthenticationState != null)
        {
            var authState = await AuthenticationState;
            var user = authState?.User;
            if (user?.Identity is not null && user.Identity.IsAuthenticated)
            {
                UserId = user.FindFirstValue(ClaimTypes.NameIdentifier);
            }
        }
        _profiles = (List<QuickProfile>?)await QuickProfileRepository!.GetQuickProfiles(UserId, InsertAt);
        SelectedProfiles = _profiles!.Where(p => p.EnabledDefault).ToList();
    }

    [Parameter]
    public EventCallback<QuickProfile> OnProfileClicked { get; set; }

    private async Task< EventCallback> Toggle(QuickProfile profile)
    {
        if (SelectedProfiles.Contains(profile))
        {
            SelectedProfiles.Remove(profile);
        }
        else
        {
            SelectedProfiles.Add(profile);
        }

        if (OnProfileClicked.HasDelegate)
        {
            await OnProfileClicked.InvokeAsync(profile);
        }


        return EventCallback.Empty;
    }

    private ButtonStyle GetButtonStyle(QuickProfile profile)
    {
        return SelectedProfiles.Contains(profile) ? ButtonStyle.Success : ButtonStyle.Warning;
    }

    private async Task Execute(QuickProfile profile)
    {
        if (OnProfileClicked.HasDelegate)
        {
            await OnProfileClicked.InvokeAsync(profile);
        }
    }

    void ShowTooltip(ElementReference elementReference, string content, TooltipOptions? options = null) => tooltipService!.Open(elementReference, content, options);
}
