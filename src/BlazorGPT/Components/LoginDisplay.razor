@using Microsoft.AspNetCore.Components.Authorization
@inject NavigationManager Navigation
@inject NavigationManager NavigationManager

<AuthorizeView>
    <Authorized>
        
        <RadzenPanelMenu>
            <RadzenPanelMenuItem Text="Account" Icon="person" Navigate="true" Path="Account/Manage" />
        </RadzenPanelMenu>

        <form action="Account/Logout" method="post">
            <RadzenButton Size="ButtonSize.Small" Variant="Variant.Outlined" ButtonStyle="ButtonStyle.Base" class="m-3" type="submit">Logout</RadzenButton>
            <AntiforgeryToken/>
            <input type="hidden" name="ReturnUrl" value="@currentUrl"/>
        </form>
    </Authorized>
    <NotAuthorized>
        

        <NavLink  href="Account/Login">
            <RadzenButton Size="ButtonSize.Small" Text="Login" Icon="login"  Variant="Variant.Outlined"/>

        </NavLink>
        <NavLink class="pe-3" href="Account/Register">
            <RadzenButton Size="ButtonSize.Small" Text="Login" Icon="person_Add"  Variant="Variant.Outlined"/>
        </NavLink>
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? currentUrl;

    protected override void OnInitialized()
    {
        currentUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        NavigationManager.LocationChanged += OnLocationChanged;
    }

    private void OnLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        currentUrl = NavigationManager.ToBaseRelativePath(e.Location);
        StateHasChanged();
    }

    public void Dispose()
    {
        NavigationManager.LocationChanged -= OnLocationChanged;
    }
}